/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fooddeliveryserver;

import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Formatter;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author mohammad
 */
public class ServerPage extends javax.swing.JFrame {

    /**
     * Creates new form ServerPage
     */
    static int port;
    ServerSocket soc;
    
    public ServerPage(int port) throws IOException {
        initComponents();
        this.port=port;
        soc=new ServerSocket(port);
        File User = new File("User.txt");
         if ( !User.exists()){
            final Formatter F = new Formatter ("User.txt");
            F.close();
            FileWriter fw = new FileWriter(User);
            fw.write("admin admin\n");
            fw.close();
            
        }
        MyRunnable myRunnable = new MyRunnable(10);
        Thread t = new Thread(myRunnable);
        t.start();
        
    }
      private ServerPage() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerPage().setVisible(true);
            }
        });
    }
    public class MyRunnable implements Runnable {

        private int var;

        public MyRunnable(int var) {
            this.var = var;
        }

        public void run() {
            while(true)
            {
                System.out.println("Waiting for Connection ...");
                try {
                    log t=new log(soc.accept());
                } catch (IOException ex) {
                    Logger.getLogger(ServerPage.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }
    static class log extends Thread
{
    Socket ClientSoc;

    DataInputStream din;
    DataOutputStream dout;
    
    log(Socket soc)
    {
        try
        {
            ClientSoc=soc;                        
            din=new DataInputStream(ClientSoc.getInputStream());
            dout=new DataOutputStream(ClientSoc.getOutputStream());
            System.out.println("Client Connected ...");
            start();
            
        }
        catch(Exception ex)
        {
        }        
    }
    void Login(String UserName,String Password) throws Exception
    {   
        File User = new File("User.txt");
        Scanner FileScanner = new Scanner (User);
        String UN , PW;
        boolean login=false;
        while ( FileScanner.hasNext()){
            UN = FileScanner.next();
            PW = FileScanner.next();
             if ( UN.equals(UserName) && PW.equals(Password)){
                 login=true;
                 break;
             }
        }
         FileScanner.close();
        if(login)
            dout.writeUTF("OK");
        else
            dout.writeUTF("Wrong");
    }
    void newUser(String UserName,String Password) throws FileNotFoundException, IOException
    {
        File User = new File("User.txt");
        Scanner FileScanner = new Scanner (User);
        String UN , PW;
        boolean exist=false;
        while ( FileScanner.hasNext()){
            UN = FileScanner.next();
            PW = FileScanner.next();
             if (UN.equals(UserName)){
                 exist=true;
                 break;
             }
        }
        FileScanner.close();
        if(exist)
        {
             dout.writeUTF("Exist");
             return;
        }
        BufferedWriter bw = new BufferedWriter( new FileWriter (User , true));
        bw.write(UserName+" "+ Password);
        bw.newLine();
        bw.close();
        bw.close();
        dout.writeUTF("OK");
        
    }
    public void run()
    {
        while(true)
        {
            try
            {
            System.out.println("Waiting for Command ...");
            String Command=din.readUTF();
            if(Command.contains("Login"))
            {
                String[] data = Command.split("%");
                String userName=data[1];
                String Password=data[2];
                System.out.println("\tLogin");
                Login(userName,Password);
                continue;
            }
            else if(Command.contains("NewUser"))
            {
                String[] data = Command.split("%");
                String userName=data[1];
                String Password=data[2];
                System.out.println("\tAdding new user");                
                newUser(userName,Password);
                continue;
            }
            else if(Command.compareTo("DISCONNECT")==0)
            {
                System.out.println("\tDisconnect Command Received ...");
                System.exit(1);
            }
            }
            catch(Exception ex)
            {
                System.out.println(ex.getMessage());
            }
        }
    }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
